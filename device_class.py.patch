# Patch generated by Pyment v0.3.3

--- a/.\nomad_camels\\main_classes\device_class.py
+++ b/.\nomad_camels\\main_classes\device_class.py
@@ -14,11 +14,17 @@
 
 class Device:
     """General class for all devices
-
+    
     The subclasses of this class should all be called "subclass", they
     are imported via importlib in that way.
     Any derived device should also provide the name of its ophyd-class
     as a string self.ophyd_class_name.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     Attributes
     ----------
@@ -115,36 +121,78 @@
         self.controls = {}
 
     def get_necessary_devices(self):
+        """ """
         return []
 
     def get_controls(self):
+        """ """
         return self.controls
 
     def get_finalize_steps(self):
+        """ """
         return ''
 
     def get_passive_config(self):
+        """ """
         return self.passive_config
 
     def get_config(self):
         """returns self.config, should be overwritten for special
-        purposes (e.g. leaving out some keys of the dictionary)"""
+        purposes (e.g. leaving out some keys of the dictionary)
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         return self.config
 
     def get_settings(self):
         """returns self.settings, should be overwritten for special
-        purposes (e.g. leaving out some keys of the dictionary)"""
+        purposes (e.g. leaving out some keys of the dictionary)
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         return self.settings
 
     def get_ioc_settings(self):
         """returns self.ioc_settings, should be overwritten for special
-        purposes (e.g. leaving out some keys of the dictionary)"""
+        purposes (e.g. leaving out some keys of the dictionary)
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         return self.ioc_settings
 
     def get_additional_info(self):
+        """ """
         return self.additional_info
 
     def get_substitutions_string(self, ioc_name:str, communication:str):
+        """
+
+        Parameters
+        ----------
+        ioc_name:str :
+            
+        communication:str :
+            
+
+        Returns
+        -------
+
+        """
         substring = f'file "db/{self.name}.db" {{\n'
         substring += f'    {{SETUP = "{ioc_name}", device = "{self.custom_name}", COMM = "{communication}"}}\n'
         substring += '}'
@@ -152,7 +200,15 @@
 
     def get_channels(self):
         """returns self.channels, should be overwritten for special
-        purposes (e.g. leaving out some keys of the dictionary)"""
+        purposes (e.g. leaving out some keys of the dictionary)
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         self.channels = {}
         outputs = get_outputs(self.ophyd_instance)
         for chan in get_channels(self.ophyd_instance):
@@ -164,13 +220,29 @@
 
     def get_additional_string(self):
         """returns a string that will be added into the protocol after
-        connecting to the device."""
+        connecting to the device.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         return ''
 
     def get_special_steps(self):
         """returns a dictionary containing containing device-specific
         loopsteps. The key is the loopstep's name, the value a list
-        containing the Class of the step, and its config-widget."""
+        containing the Class of the step, and its config-widget.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         return {}
 
 def check_output(cls) -> bool:
@@ -182,7 +254,17 @@
 
 def get_outputs(dev:OphydDevice):
     """walks through the components of an ophyd-device and checks
-    whether they can be written"""
+    whether they can be written
+
+    Parameters
+    ----------
+    dev:OphydDevice :
+        
+
+    Returns
+    -------
+
+    """
     outputs = []
     for comp in dev.walk_components():
         cls = comp.item.cls
@@ -193,7 +275,17 @@
 
 def get_channels(dev:OphydDevice):
     """returns the components of an ophyd-device that are not listed in
-    the configuration"""
+    the configuration
+
+    Parameters
+    ----------
+    dev:OphydDevice :
+        
+
+    Returns
+    -------
+
+    """
     channels = []
     for comp in dev.walk_components():
         name = comp.item.attr
@@ -205,7 +297,15 @@
 
 class Device_Config(QWidget):
     """Parent class for the configuration-widgets
-    (shown on the frontpanel) of the devices."""
+    (shown on the frontpanel) of the devices.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
     ioc_change = Signal()
     name_change = Signal(str)
 
@@ -300,6 +400,7 @@
         self.load_settings()
 
     def ioc_set_changed(self):
+        """ """
         loc = self.checkBox_use_local_ioc.isChecked()
         self.label_ioc_name.setEnabled(not loc)
         self.lineEdit_ioc_name.setEnabled(not loc)
@@ -309,7 +410,15 @@
     def connection_type_changed(self):
         """Called when the comboBox_connection_type is changed. Switches
         to another connector-widget to specify things like the Address
-        of the device."""
+        of the device.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         comboText = self.comboBox_connection_type.currentText()
         ep = comboText.startswith('EPICS:')
         conn_old = self.connector
@@ -331,6 +440,7 @@
             self.ioc_change.emit()
 
     def get_ioc_settings(self):
+        """ """
         # if not self.no_ioc_connection:
         self.ioc_settings.update({'use_local_ioc': self.checkBox_use_local_ioc.isChecked(),
                                   'ioc_name': self.lineEdit_ioc_name.text()})
@@ -342,7 +452,15 @@
         """Updates the settings_dict with the current settings.
         Overwrite this function for each device to specify the settings.
         It is recommended to still call the super() method for the
-        connection-settings."""
+        connection-settings.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         # if not self.no_ioc_connection:
         self.settings_dict.update({'connection': {'type': self.comboBox_connection_type.currentText()}})
         self.settings_dict['connection'].update(self.connector.get_settings())
@@ -352,7 +470,15 @@
         """Loads the settings from the settings_dict. Depending on the
         connection-type, the correct widget is set and the settings
         entered. Overwrite this function (and call it) for the specific
-        settings."""
+        settings.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         self.connection_type_changed()
         no_choice = self.comboBox_connection_type.count() < 2
         self.label_connection.setHidden(no_choice)
@@ -363,15 +489,25 @@
 
     def get_config(self):
         """Returns the config_dict of the device. Overwrite this
-        function for each device to specify the config."""
+        function for each device to specify the config.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         return self.config_dict
 
     def get_info(self):
+        """ """
         self.additional_info['description'] = self.textEdit_desc.toPlainText()
         return self.additional_info
 
 
 class Device_Config_Sub(QWidget):
+    """ """
     def __init__(self, settings_dict=None, parent=None, config_dict=None):
         super().__init__()
         self.settings_dict = settings_dict or {}
@@ -381,15 +517,25 @@
             self.layout().addWidget(QLabel('Nothing to configure!'))
 
     def get_config(self):
+        """ """
         return self.config_dict
 
     def get_settings(self):
+        """ """
         return self.settings_dict
 
 
 class Connection_Config(QWidget):
     """Base Class for the widgets used to specify the connection of a
-    given device."""
+    given device.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
     connection_change = Signal()
 
     def __init__(self, parent=None):
@@ -404,14 +550,32 @@
 
     def load_settings(self, settings_dict):
         """Overwrite to load the connection-specific settings from
-        `settings_dict`."""
+        `settings_dict`.
+
+        Parameters
+        ----------
+        settings_dict :
+            
+
+        Returns
+        -------
+
+        """
         pass
 
 
 
 class Prologix_Config(Connection_Config):
     """Widget for the settings when the connection is via a Prologix
-    GPIB-Ethernet adapter."""
+    GPIB-Ethernet adapter.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
     def __init__(self, parent=None):
         super().__init__(parent)
         layout = self.layout()
@@ -434,7 +598,17 @@
 
     def load_settings(self, settings_dict):
         """Loads the settings_dict, specifically the IP-Address and the
-        GPIB-Address."""
+        GPIB-Address.
+
+        Parameters
+        ----------
+        settings_dict :
+            
+
+        Returns
+        -------
+
+        """
         if 'IP-Address' in settings_dict:
             self.lineEdit_ip.setText(settings_dict['IP-Address'])
         if 'GPIB-Address' in settings_dict:
@@ -442,6 +616,7 @@
 
 
 class LAN_Config(Connection_Config):
+    """ """
     def __init__(self, parent=None):
         super().__init__(parent)
         layout = self.layout()
@@ -458,13 +633,24 @@
 
     def load_settings(self, settings_dict):
         """Loads the settings_dict, specifically the IP-Address and the
-        GPIB-Address."""
+        GPIB-Address.
+
+        Parameters
+        ----------
+        settings_dict :
+            
+
+        Returns
+        -------
+
+        """
         if 'IP-Address' in settings_dict:
             self.lineEdit_ip.setText(settings_dict['IP-Address'])
 
 
 
 class USB_Serial_Config(Connection_Config):
+    """ """
     def __init__(self, parent=None):
         super().__init__(parent)
         label_port = QLabel('COM-Port:')
@@ -485,6 +671,7 @@
         self.change_desc()
 
     def change_desc(self):
+        """ """
         port = self.comboBox_port.currentText()
         desc = self.ports[port]['description']
         hwid = self.ports[port]['hardware']
@@ -492,15 +679,28 @@
         self.label_hwid.setText(hwid)
 
     def get_settings(self):
+        """ """
         return {'Port': self.comboBox_port.currentText()}
 
     def load_settings(self, settings_dict):
+        """
+
+        Parameters
+        ----------
+        settings_dict :
+            
+
+        Returns
+        -------
+
+        """
         if 'Port' in settings_dict and settings_dict['Port'] in self.ports.keys():
             self.comboBox_port.setCurrentText(settings_dict['Port'])
 
 
 
 class Local_VISA(Connection_Config):
+    """ """
     def __init__(self, parent=None):
         super().__init__(parent)
         label_port = QLabel('Resource-Name:')
@@ -545,12 +745,24 @@
     #     self.label_hwid.setText(hwid)
 
     def get_settings(self):
+        """ """
         return {'resource_name': self.comboBox_port.currentText(),
                 'baud_rate': int(self.lineEdit_baud.text()),
                 'read_termination': self.lineEdit_in_term.text().replace('\\r', '\r').replace('\\n', '\n'),
                 'write_termination': self.lineEdit_out_term.text().replace('\\r', '\r').replace('\\n', '\n')}
 
     def load_settings(self, settings_dict):
+        """
+
+        Parameters
+        ----------
+        settings_dict :
+            
+
+        Returns
+        -------
+
+        """
         if 'resource_name' in settings_dict and settings_dict['resource_name'] in self.ports:
             self.comboBox_port.setCurrentText(settings_dict['resource_name'])
         if 'baud_rate' in settings_dict:
@@ -563,6 +775,7 @@
 
 
 class Simple_Config(Device_Config):
+    """ """
     def __init__(self, parent=None, device_name='', data='', settings_dict=None,
                  config_dict=None, ioc_dict=None, additional_info=None,
                  comboBoxes=None, config_types=None, labels=None):
@@ -580,15 +793,18 @@
         self.load_settings()
 
     def get_settings(self):
+        """ """
         self.sub_widget.get_settings()
         return super().get_settings()
 
     def get_config(self):
+        """ """
         self.sub_widget.get_config()
         return super().get_config()
 
 
 class Simple_Config_Sub(Device_Config_Sub):
+    """ """
     def __init__(self, settings_dict=None, parent=None, config_dict=None,
                  comboBoxes=None, config_types=None, labels=None):
         super().__init__(settings_dict=settings_dict, parent=parent,
@@ -738,6 +954,7 @@
                 row += 1
 
     def get_settings(self):
+        """ """
         for name, widge in self.setting_checks.items():
             self.settings_dict[name] = widge.isChecked()
         for name, widge in self.setting_combos.items():
@@ -749,6 +966,7 @@
         return super().get_settings()
 
     def get_config(self):
+        """ """
         for name, widge in self.config_checks.items():
             self.config_dict[name] = widge.isChecked()
         for name, widge in self.config_combos.items():
@@ -766,6 +984,7 @@
 
 
 def get_ports():
+    """ """
     import serial.tools.list_ports
     ports = serial.tools.list_ports.comports()
     port_dict = {}
