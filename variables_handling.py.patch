# Patch generated by Pyment v0.3.3

--- a/.\nomad_camels\\utility\variables_handling.py
+++ b/.\nomad_camels\\utility\variables_handling.py
@@ -30,6 +30,7 @@
 
 
 def get_output_channels():
+    """ """
     outputs = []
     for channel in channels:
         if channels[channel].output:
@@ -95,7 +96,19 @@
 
 def get_color(color='', string=False):
     """Returns the respective QColor or rgb-code(if `string`) for
-    `color`, taking dark-mode into account."""
+    `color`, taking dark-mode into account.
+
+    Parameters
+    ----------
+    color :
+         (Default value = '')
+    string :
+         (Default value = False)
+
+    Returns
+    -------
+
+    """
     if color == 'red' or color == 'r':
         rgb = (255, 180, 180)
         if dark_mode:
@@ -130,7 +143,19 @@
 
 def get_menus(connect_function, pretext='Insert'):
     """Providing QMenus with the `connect_function` for each action,
-    containing all the variables, channels, functions and operators."""
+    containing all the variables, channels, functions and operators.
+
+    Parameters
+    ----------
+    connect_function :
+        
+    pretext :
+         (Default value = 'Insert')
+
+    Returns
+    -------
+
+    """
     variable_menu = QMenu(f'{pretext} Variable')
     channel_menu = QMenu(f'{pretext} Channel-Value')
     function_menu = QMenu(f'{pretext} Function')
@@ -174,6 +199,23 @@
     return menus, actions
 
 def add_actions_from_dict(dictionary, actions, connect_function, add_string=''):
+    """
+
+    Parameters
+    ----------
+    dictionary :
+        
+    actions :
+        
+    connect_function :
+        
+    add_string :
+         (Default value = '')
+
+    Returns
+    -------
+
+    """
     for var in sorted(dictionary, key=lambda x: x.lower()):
         if isinstance(dictionary[var], dict):
             add_actions_from_dict(dictionary[var], actions, connect_function,
@@ -185,7 +227,17 @@
             actions.append(action)
 
 def check_eval(s):
-    """Checks, whether the string `s` can be evaluated."""
+    """Checks, whether the string `s` can be evaluated.
+
+    Parameters
+    ----------
+    s :
+        
+
+    Returns
+    -------
+
+    """
     try:
         namespace = dict(utils._base_namespace)
         namespace.update(protocol_variables)
@@ -198,6 +250,17 @@
         return False
 
 def get_eval(s):
+    """
+
+    Parameters
+    ----------
+    s :
+        
+
+    Returns
+    -------
+
+    """
     try:
         namespace = dict(utils._base_namespace)
         namespace.update(protocol_variables)
@@ -210,7 +273,17 @@
 
 
 def get_data(s):
-    """Returns the evaluated data of s."""
+    """Returns the evaluated data of s.
+
+    Parameters
+    ----------
+    s :
+        
+
+    Returns
+    -------
+
+    """
     if not s:
         return ''
     try:
@@ -222,7 +295,17 @@
     return lit
 
 def check_data_type(s):
-    """Returns the datatype of the string-evaluation of s."""
+    """Returns the datatype of the string-evaluation of s.
+
+    Parameters
+    ----------
+    s :
+        
+
+    Returns
+    -------
+
+    """
     if not isinstance(s, str):
         return str(type(s))
     if not s:
@@ -236,6 +319,17 @@
     return str(type(lit))
 
 def get_write_from_data_type(s):
+    """
+
+    Parameters
+    ----------
+    s :
+        
+
+    Returns
+    -------
+
+    """
     t = check_data_type(s)
     if t == 'String':
         return f'"{s}"'
