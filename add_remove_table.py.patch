# Patch generated by Pyment v0.3.3

--- a/.\nomad_camels\\ui_widgets\add_remove_table.py
+++ b/.\nomad_camels\\ui_widgets\add_remove_table.py
@@ -12,7 +12,15 @@
 
 class AddRemoveTable(QWidget):
     """This widget provides a QTableView and two buttons for adding /
-    removing rows / columns. """
+    removing rows / columns.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
     sizechange = Signal()
     added = Signal(int)
     removed = Signal(int)
@@ -157,6 +165,7 @@
         self.table_model.itemChanged.connect(self.check_string)
 
     def update_max_hight(self):
+        """ """
         if self.growsize:
             self.setMaximumHeight(90 + self.table_model.rowCount()*100)
             self.sizechange.emit()
@@ -167,6 +176,17 @@
             self.setMaximumHeight(30 * len(self.headerLabels) + 30)
 
     def change_table_data(self, tableData):
+        """
+
+        Parameters
+        ----------
+        tableData :
+            
+
+        Returns
+        -------
+
+        """
         if isinstance(tableData, dict):
             tableData = pd.DataFrame(tableData)
         self.tableData = tableData
@@ -187,7 +207,17 @@
     def context_menu(self, pos):
         """Generates the right-click-menu.
         There are entries for inserting (replace) and appending the
-        variables, channels, functions and operators."""
+        variables, channels, functions and operators.
+
+        Parameters
+        ----------
+        pos :
+            
+
+        Returns
+        -------
+
+        """
         menu = QMenu()
         # putting the returned actions somewhere is necessary, otherwise
         # there will be none inside the single menus
@@ -207,21 +237,51 @@
         menu.exec_(self.mapToGlobal(pos))
 
     def append_variable(self, val):
-        """Used for the single actions of the context menu."""
+        """Used for the single actions of the context menu.
+
+        Parameters
+        ----------
+        val :
+            
+
+        Returns
+        -------
+
+        """
         ind = self.table.selectedIndexes()[0]
         item = self.table_model.itemFromIndex(ind)
         text = item.text()
         item.setText(f'{text}{val}')
 
     def insert_variable(self, val):
-        """Used for the single actions of the context menu."""
+        """Used for the single actions of the context menu.
+
+        Parameters
+        ----------
+        val :
+            
+
+        Returns
+        -------
+
+        """
         ind = self.table.selectedIndexes()[0]
         item = self.table_model.itemFromIndex(ind)
         item.setText(f'{val}')
 
     def check_string(self, item):
         """If an element is part of the checkstrings, the item becomes
-        green if valid, red otherwise and white if empty."""
+        green if valid, red otherwise and white if empty.
+
+        Parameters
+        ----------
+        item :
+            
+
+        Returns
+        -------
+
+        """
         ind = item.index()
         pos = ind.column() if self.horizontal else ind.row()
         if pos not in self.checkstrings or item.text() == '':
@@ -234,7 +294,17 @@
 
     def add(self, vals=None):
         """Add the `vals` to the table as a new line. Checks are done
-        for each part, whether there should be a comboBox etc."""
+        for each part, whether there should be a comboBox etc.
+
+        Parameters
+        ----------
+        vals :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if vals is None:
             vals = [''] * len(self.headerLabels) if len(self.headerLabels) else ''
         items = []
@@ -310,6 +380,7 @@
             self.added.emit(items[0].column())
 
     def remove(self):
+        """ """
         try:
             index = self.table.selectedIndexes()[0]
         except IndexError:
@@ -338,7 +409,15 @@
 
     def update_table_data(self):
         """Reading all the data of the table, putting it as dict into
-        `self.tableData` and returning it."""
+        `self.tableData` and returning it.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         self.tableData = {}
         for i, lab in enumerate(self.headerLabels):
             vals = []
@@ -425,11 +504,22 @@
         self.setMinimumWidth(len(headerLabels) * 70)
 
     def get_data(self):
+        """ """
         return self.table.update_table_data()
 
     def keyPressEvent(self, a0: QKeyEvent) -> None:
         """Overwrites the keyPressEvent of the QDialog so that it does
-        not close when pressing Enter/Return."""
+        not close when pressing Enter/Return.
+
+        Parameters
+        ----------
+        a0: QKeyEvent :
+            
+
+        Returns
+        -------
+
+        """
         if a0.key() == Qt.Key_Enter or a0.key() == Qt.Key_Return:
             return
         super().keyPressEvent(a0)