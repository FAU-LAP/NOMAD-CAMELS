# Patch generated by Pyment v0.3.3

--- a/.\nomad_camels\\loop_steps\wait_loop_step.py
+++ b/.\nomad_camels\\loop_steps\wait_loop_step.py
@@ -4,13 +4,7 @@
 from nomad_camels.ui_widgets.variable_tool_tip_box import Variable_Box
 
 class Wait_Loop_Step(Loop_Step):
-    """A loopstep to simply wait some defined time.
-
-    Attributes
-    ----------
-    wait_time : float
-        The time (in seconds) for how long to wait.
-    """
+    """A loopstep to simply wait some defined time."""
     def __init__(self, name='', parent_step=None, step_info=None, **kwargs):
         super().__init__(name, parent_step, step_info, **kwargs)
         self.step_type = 'Wait'
@@ -19,13 +13,34 @@
         self.wait_time = step_info['wait_time'] if 'wait_time' in step_info else 0.0
 
     def get_protocol_string(self, n_tabs=1):
-        """The protocol just calls `bps.wait(`wait_time`)`."""
+        """The protocol just calls `bps.wait(`wait_time`)`.
+
+        Parameters
+        ----------
+        n_tabs :
+             (Default value = 1)
+
+        Returns
+        -------
+
+        """
         tabs = '\t' * n_tabs
         protocol_string = super().get_protocol_string(n_tabs)
         protocol_string += f'{tabs}yield from bps.sleep(eva.eval("{self.wait_time}"))\n'
         return protocol_string
 
     def get_protocol_short_string(self, n_tabs=0):
+        """
+
+        Parameters
+        ----------
+        n_tabs :
+             (Default value = 0)
+
+        Returns
+        -------
+
+        """
         short_string = super().get_protocol_short_string(n_tabs)
         short_string = f'{short_string[:-1]} - {self.wait_time} s\n'
         return short_string
@@ -59,5 +74,6 @@
         self.setLayout(layout)
 
     def update_duration(self):
+        """ """
         self.loop_step.wait_time = self.lineEdit_duration.text()
 
