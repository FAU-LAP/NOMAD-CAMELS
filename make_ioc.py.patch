# Patch generated by Pyment v0.3.3

--- a/.\nomad_camels\\EPICS_handling\make_ioc.py
+++ b/.\nomad_camels\\EPICS_handling\make_ioc.py
@@ -17,7 +17,17 @@
 
 def clean_up_ioc(ioc='CAMELS'):
     """Calls `clean_up_ioc.cmd` followed by `create_ioc.cmd` to build a
-    fresh and empty IOC."""
+    fresh and empty IOC.
+
+    Parameters
+    ----------
+    ioc :
+         (Default value = 'CAMELS')
+
+    Returns
+    -------
+
+    """
     info1 = subprocess.Popen(['wsl', './EPICS_handling/clean_up_ioc.cmd', ioc],
                              stdout=subprocess.PIPE,
                              stderr=subprocess.STDOUT,
@@ -37,7 +47,21 @@
 def make_ioc(ioc='CAMELS', info_signal=None, step_signal=None):
     """This function calls the make_ioc.cmd from the wsl shell.
     It goes to the given ioc, and performs one "make distclean" followed
-    by a "make"."""
+    by a "make".
+
+    Parameters
+    ----------
+    ioc :
+         (Default value = 'CAMELS')
+    info_signal :
+         (Default value = None)
+    step_signal :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     # ioc_sup_path = f'{epics_path}/IOCs/{ioc}/{ioc}Sup'
     # if os.path.isdir(ioc_sup_path) and not len(os.listdir(ioc_sup_path)) > 0:
     #     os.rmdir(ioc_sup_path)
@@ -69,7 +93,19 @@
     to the copying-string. The string is then written in a temporary
     file 'copy_temp.cmd', in binary. Subprocess is used to call the wsl
     to run 'copy_temp.cmd'. This workaround is necessary, as the
-    file-protections etc. have to be correct in the wsl environment."""
+    file-protections etc. have to be correct in the wsl environment.
+
+    Parameters
+    ----------
+    device_dict:dict :
+        
+    ioc :
+         (Default value = 'CAMELS')
+
+    Returns
+    -------
+
+    """
     driver_path = variables_handling.device_driver_path
     driver_path_wsl = f'/mnt/{driver_path[0].lower()}{driver_path[2:]}'
     supports = []
@@ -165,7 +201,23 @@
 
 def add_to_string(req, dbd_string, libs_string, ioc):
     """Adding the requirements in the correct order to the DBD and LIBS-
-    strings."""
+    strings.
+
+    Parameters
+    ----------
+    req :
+        
+    dbd_string :
+        
+    libs_string :
+        
+    ioc :
+        
+
+    Returns
+    -------
+
+    """
     non_lib = ['drvAsynSerialPort']
     if req == 'std':
         dbd_string += f'{ioc}_DBD += stdSupport.dbd\n'
@@ -178,7 +230,19 @@
 
 def make_src_mk_string(ioc, included):
     """This function should create the the makefile for the src
-    directory using the correct order of included packages."""
+    directory using the correct order of included packages.
+
+    Parameters
+    ----------
+    ioc :
+        
+    included :
+        
+
+    Returns
+    -------
+
+    """
     driver_path = variables_handling.device_driver_path
     add_order = ['calc', 'prologixSup', 'stream', 'asyn', 'drvAsynSerialPort',
                  'std']
@@ -239,16 +303,19 @@
 
     Parameters
     ----------
-    device : device_class.Device
-        The device object
-    address_dict : dict
-        The dictionary with so far used addresses, needed to number the
-        the ports, e.g. the IP-Addresses for Prologix-Adapters.
-    port_string : str
-        The string to be updated with additional asyn-ports.
-    supports : list
-        The list will be updated, adding further necessary
-        support-packages.
+    device :
+        
+    address_dict :
+        
+    port_string :
+        
+    supports :
+        
+
+    Returns
+    -------
+
+    
     """
     comm = ''
     if 'connection' in device.ioc_settings:
