# Patch generated by Pyment v0.3.3

--- a/.\nomad_camels\\ui_widgets\channels_check_table.py
+++ b/.\nomad_camels\\ui_widgets\channels_check_table.py
@@ -6,6 +6,7 @@
 
 
 class Channels_Check_Table(QWidget):
+    """ """
     def __init__(self, parent, headerLabels=None, only_output=False,
                  info_dict=None, checkstrings=None, title='', channels=None):
         super().__init__(parent)
@@ -50,7 +51,17 @@
     def context_menu(self, pos):
         """Generates the right-click-menu.
         There are entries for inserting (replace) and appending the
-        variables, channels, functions and operators."""
+        variables, channels, functions and operators.
+
+        Parameters
+        ----------
+        pos :
+            
+
+        Returns
+        -------
+
+        """
         menu = QMenu()
         # putting the returned actions somewhere is necessary, otherwise
         # there will be none inside the single menus
@@ -70,20 +81,51 @@
         menu.exec_(self.mapToGlobal(pos))
 
     def append_variable(self, val):
-        """Used for the single actions of the context menu."""
+        """Used for the single actions of the context menu.
+
+        Parameters
+        ----------
+        val :
+            
+
+        Returns
+        -------
+
+        """
         ind = self.tableWidget_channels.selectedIndexes()[0]
         item = self.tableWidget_channels.itemFromIndex(ind)
         text = item.text()
         item.setText(f'{text}{val}')
 
     def insert_variable(self, val):
-        """Used for the single actions of the context menu."""
+        """Used for the single actions of the context menu.
+
+        Parameters
+        ----------
+        val :
+            
+
+        Returns
+        -------
+
+        """
         ind = self.tableWidget_channels.selectedIndexes()[0]
         item = self.tableWidget_channels.itemFromIndex(ind)
         item.setText(f'{val}')
 
 
     def check_change(self, pos):
+        """
+
+        Parameters
+        ----------
+        pos :
+            
+
+        Returns
+        -------
+
+        """
         c = pos.column()
         if c != 0:
             return
@@ -97,16 +139,28 @@
         self.tableWidget_channels.item(r, c+1).setBackground(QBrush(color))
 
     def change_search(self):
+        """ """
         self.update_info()
         self.build_channels_table()
 
     def get_info(self):
+        """ """
         self.update_info()
         return self.info_dict
 
     def check_string(self, item):
         """If an element is part of the checkstrings, the item becomes
-        green if valid, red otherwise and white if empty."""
+        green if valid, red otherwise and white if empty.
+
+        Parameters
+        ----------
+        item :
+            
+
+        Returns
+        -------
+
+        """
         if item.column() not in self.checkstrings:
             return
         if self.tableWidget_channels.item(item.row(), 0).checkState() == Qt.CheckState.Unchecked and item.text() == '':
@@ -118,6 +172,7 @@
         item.setBackground(QBrush(color))
 
     def update_info(self):
+        """ """
         channel_list = self.info_dict['channel']
         for i in range(self.tableWidget_channels.rowCount()):
             name = self.tableWidget_channels.item(i, 1).text()
@@ -145,6 +200,7 @@
 
 
     def build_channels_table(self):
+        """ """
         self.tableWidget_channels.clear()
         self.tableWidget_channels.setColumnCount(len(self.headerLabels))
         self.tableWidget_channels.setRowCount(0)
