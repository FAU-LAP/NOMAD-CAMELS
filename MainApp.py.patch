# Patch generated by Pyment v0.3.3

--- a/.\nomad_camels\\MainApp.py
+++ b/.\nomad_camels\\MainApp.py
@@ -234,13 +234,24 @@
 
 
     def report_bug(self):
+        """ """
         path = f"{self.preferences['py_files_path']}/{self.current_protocol.name}.py"
         os.startfile(path)
 
 
 
     def mousePressEvent(self, a0: QMouseEvent) -> None:
-        """Overwrite parent method to connect to undo and redo functions."""
+        """Overwrite parent method to connect to undo and redo functions.
+
+        Parameters
+        ----------
+        a0: QMouseEvent :
+            
+
+        Returns
+        -------
+
+        """
         but = a0.button()
         if but == 8:
             self.undo()
@@ -250,12 +261,14 @@
             super().mousePressEvent(a0)
 
     def undo(self):
+        """ """
         # TODO implement actual functions
         self.undo_stack.undo()
         self.actionUndo.setEnabled(self.undo_stack.canUndo())
         self.actionRedo.setEnabled(self.undo_stack.canRedo())
 
     def redo(self):
+        """ """
         # TODO implement actual functions
         self.undo_stack.redo()
         self.actionUndo.setEnabled(self.undo_stack.canUndo())
@@ -280,7 +293,17 @@
         return super().close()
 
     def closeEvent(self, a0: QCloseEvent) -> None:
-        """Calling the save_state method when closing the window."""
+        """Calling the save_state method when closing the window.
+
+        Parameters
+        ----------
+        a0: QCloseEvent :
+            
+
+        Returns
+        -------
+
+        """
         self.closing = True
         if self.preferences['autosave']:
             self.save_state()
@@ -302,11 +325,18 @@
     def edit_user_info(self):
         """Calls dialog for user-information when
         pushButton_editUserInfo is clicked.
-
+        
         The opened AddRemoveDialoge contains columns for Name, E-Mail,
         Affiliation, Address, ORCID and Phone of the user.
         If the dialog is canceled, nothing is changed, otherwise the new
         data will be written into self.userdata.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
 
         self.active_user = self.comboBox_user.currentText()
@@ -333,7 +363,15 @@
 
     def save_user_data(self):
         """Calling the save_dictionary function with the savefile as
-        %localappdata%/userdata.json and self.userdata as dictionary."""
+        %localappdata%/userdata.json and self.userdata as dictionary.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         self.active_user = self.comboBox_user.currentText()
         userdic = {'active_user': self.active_user}
         userdic.update(self.userdata)
@@ -341,7 +379,15 @@
 
     def load_user_data(self):
         """Loading the dictionary from %localappdata%/userdata.json,
-        selecting the active user and saving the rest into self.userdata."""
+        selecting the active user and saving the rest into self.userdata.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         userdat = {}
         if os.path.isfile(f'{load_save_functions.appdata_path}/userdata.json'):
             with open(f'{load_save_functions.appdata_path}/userdata.json', 'r') as f:
@@ -358,11 +404,18 @@
     def edit_sample_info(self):
         """Calls dialog for user-information when
         pushButton_editSampleInfo is clicked.
-
+        
         The opened AddRemoveDialoge contains columns for Name,
         Identifier, and Preparation-Info.
         If the dialog is canceled, nothing is changed, otherwise the new
         data will be written into self.userdata.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
 
         self.active_sample = self.comboBox_sample.currentText()
@@ -384,7 +437,15 @@
 
     def save_sample_data(self):
         """Calling the save_dictionary function with the savefile as
-        %localappdata%/sampledata.json and self.sampledata as dictionary."""
+        %localappdata%/sampledata.json and self.sampledata as dictionary.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         self.active_sample = self.comboBox_sample.currentText()
         sampledic = {'active_sample': self.active_sample}
         sampledic.update(self.sampledata)
@@ -392,7 +453,15 @@
 
     def load_sample_data(self):
         """Loading the dictionary from %localappdata%/sampledata.json,
-        selecting the active sample and saving the rest into self.sampledata."""
+        selecting the active sample and saving the rest into self.sampledata.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         sampledat = {}
         if os.path.isfile(f'{load_save_functions.appdata_path}/sampledata.json'):
             with open(f'{load_save_functions.appdata_path}/sampledata.json', 'r') as f:
@@ -411,7 +480,7 @@
     # --------------------------------------------------
     def load_preferences(self):
         """Loads the preferences.
-
+        
         Those may contain:
         - autosave: turn on / off autosave on closing the program.
         - dark_mode: turning dark-mode on / off.
@@ -426,6 +495,13 @@
         - device_driver_path: the path, where CAMELS can find the
             installed devices.
         - databroker_catalog_name: the name of the databroker catalog
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
 
         self.preferences = load_save_functions.get_preferences()
@@ -440,17 +516,27 @@
         variables_handling.meas_files_path = self.preferences['meas_files_path']
 
     def change_theme(self):
+        """ """
         theme = self.preferences['graphic_theme']
         theme_changing.change_theme(theme)
         self.toggle_dark_mode()
 
     def toggle_dark_mode(self):
         """Turning dark mode on / off, called whenever the settigns are
-        changed. Using qdarkstyle to provide the stylesheets."""
+        changed. Using qdarkstyle to provide the stylesheets.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         dark = self.preferences['dark_mode']
         variables_handling.dark_mode = dark
 
     def change_catalog_name(self):
+        """ """
         if 'meas_files_path' in self.preferences:
             catalog_name = 'CATALOG_NAME'
             if 'databroker_catalog_name' in self.preferences:
@@ -459,6 +545,7 @@
         self.databroker_catalog = databroker.catalog[self.preferences['databroker_catalog_name']]
 
     def launch_device_builder(self):
+        """ """
         from nomad_camels.tools import VISA_device_builder
         device_builder = VISA_device_builder.VISA_Device_Builder(self)
         device_builder.show()
@@ -467,7 +554,15 @@
     def change_preferences(self):
         """Called when any preferences are changed. Makes the dictionary
          of preferences and calls save_preferences from the
-         load_save_functions module."""
+         load_save_functions module.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         settings_dialog = Settings_Window(parent=self, settings=self.preferences)
         if settings_dialog.exec():
             self.preferences = settings_dialog.get_settings()
@@ -483,7 +578,17 @@
         # load_save_functions.save_preferences(prefs)
 
     def save_state(self, fromload=False):
-        """Saves the current states of both presets."""
+        """Saves the current states of both presets.
+
+        Parameters
+        ----------
+        fromload :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         self.make_save_dict()
         load_save_functions.autosave_preset(self._current_preset[0], self.__save_dict__)
         if fromload:
@@ -513,7 +618,15 @@
 
     def save_preset_as(self):
         """Opens a QFileDialog to save the device preset.
-        A backup / autosave of the preset is made automatically."""
+        A backup / autosave of the preset is made automatically.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         file = QFileDialog.getSaveFileName(self, 'Save Preset',
                                            load_save_functions.preset_path,
                                            '*.preset')[0]
@@ -531,7 +644,15 @@
 
     def load_backup_preset(self):
         """Opens a QFileDialog in the Backup-folder of the presets.
-        If a backup is selected, the current preset is put into backup."""
+        If a backup is selected, the current preset is put into backup.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         file = QFileDialog.getOpenFileName(self, 'Open Preset',
                                            f'{load_save_functions.preset_path}/Backup',
                                            '*.preset')[0]
@@ -554,7 +675,17 @@
 
     def change_preset(self, preset):
         """saves the old device preset,
-        then changes to / loads the new preset."""
+        then changes to / loads the new preset.
+
+        Parameters
+        ----------
+        preset :
+            
+
+        Returns
+        -------
+
+        """
         self.save_state()
         self._current_preset[0] = preset
         self.load_preset(preset)
@@ -562,7 +693,17 @@
 
     def load_preset(self, preset):
         """Called when the comboBox_device_preset is changed
-        (or when loading the last state). Opens the given preset."""
+        (or when loading the last state). Opens the given preset.
+
+        Parameters
+        ----------
+        preset :
+            
+
+        Returns
+        -------
+
+        """
         if self.saving:
             return
         try:
@@ -583,7 +724,15 @@
     def update_channels(self):
         """Called when the active devices change.
         The channels in variables_handling are updated with the ones
-        provided by the active devices."""
+        provided by the active devices.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         variables_handling.channels.clear()
         for key, dev in self.active_devices_dict.items():
             for channel in dev.get_channels():
@@ -591,6 +740,7 @@
         self.update_device_add_ons()
 
     def update_device_add_ons(self):
+        """ """
         layout = self.add_on_buttons.layout()
         for i in reversed(range(layout.count())):
             layout.itemAt(i).widget().deleteLater()
@@ -609,6 +759,21 @@
             button.clicked.connect(lambda state=None, x=add_on, y=button, z=self.add_ons[add_on][1]: self.start_addon(x, y, z))
 
     def start_addon(self, addon, button, device=None):
+        """
+
+        Parameters
+        ----------
+        addon :
+            
+        button :
+            
+        device :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         self.get_device_config(False)
         if device:
             device_list = device.get_necessary_devices()
@@ -628,6 +793,19 @@
         button.setEnabled(False)
 
     def stopped_addon(self, addon, button):
+        """
+
+        Parameters
+        ----------
+        addon :
+            
+        button :
+            
+
+        Returns
+        -------
+
+        """
         if self.closing:
             return
         self.closed_addon = self.active_add_ons.pop(addon)
@@ -635,6 +813,7 @@
         button.setEnabled(True)
 
     def make_save_dict(self):
+        """ """
         self.get_device_config()
         self.get_step_config()
         self.update_loop_step_order()
@@ -647,6 +826,17 @@
     # Threads - general
     # --------------------------------------------------
     def protocol_finished(self, *args):
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+
+        Returns
+        -------
+
+        """
         # self.pushButton_run_protocol.setText('Build and run selected protocol')
         self.thread_finished()
         for sub in self.re_subs:
@@ -658,6 +848,7 @@
         self.pushButton_run_protocol.setText('Build+Run')
 
     def make_new_run_thread(self):
+        """ """
         self.run_thread = qthreads.Run_Protocol()
         self.run_thread.start()
         self.run_thread.sig_step.connect(self.change_progressBar_value_meas)
@@ -666,28 +857,58 @@
         self.run_thread.protocol_done.connect(self.protocol_finished)
 
     def run_thread_finished(self):
+        """ """
         # self.pushButton_run_protocol.setText('Build and run selected protocol')
         self.run_thread = None
         self.protocol_finished()
         self.make_new_run_thread()
 
     def make_thread_finished(self):
+        """ """
         self.make_thread = None
         self.pushButton_run_ioc.setEnabled(True)
         self.thread_finished()
 
     def thread_finished(self):
         """Called, when a run_thread or make_thread is finished. If both
-         are finished, the cursor is set back to the ArrowCursor."""
+         are finished, the cursor is set back to the ArrowCursor.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         if self.make_thread is None:
             self.setCursor(Qt.ArrowCursor)
 
     def change_progressBar_value(self, val):
-        """Sets the progressBar_devices to the given val."""
+        """Sets the progressBar_devices to the given val.
+
+        Parameters
+        ----------
+        val :
+            
+
+        Returns
+        -------
+
+        """
         self.progressBar_devices.setValue(val)
 
     def change_progressBar_value_meas(self, val):
-        """Sets the progressBar_protocols to the given val."""
+        """Sets the progressBar_protocols to the given val.
+
+        Parameters
+        ----------
+        val :
+            
+
+        Returns
+        -------
+
+        """
         self.progressBar_protocols.setValue(val)
 
     # --------------------------------------------------
@@ -695,7 +916,15 @@
     # --------------------------------------------------
     def remove_device(self):
         """Opens a dialog to confirm removing the device, then pops it
-        from the active_devices_dict."""
+        from the active_devices_dict.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         index = self.treeView_devices.selectedIndexes()[0]
         dat = self.item_model_devices.itemFromIndex(index).data()
         if dat is not None and not dat.startswith('tag:'):
@@ -711,7 +940,15 @@
 
     def add_device(self):
         """Opens the dialog to add a device. The returned values of the
-        dialog are inserted to the available devices."""
+        dialog are inserted to the available devices.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         add_dialog = AddDeviceDialog(active_devices_dict=self.active_devices_dict,
                                      parent=self)
         if add_dialog.exec():
@@ -725,7 +962,15 @@
     def tree_click(self):
         """Called when clicking the treeView_devices. If the selected
         index is a device, it will call the config-Widget, and, if
-        possible, save the settings of the last opened config-widget."""
+        possible, save the settings of the last opened config-widget.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         index = self.treeView_devices.selectedIndexes()[0]
         dat = self.item_model_devices.itemFromIndex(index).data()
         if dat is not None and not dat.startswith('tag:'):
@@ -742,6 +987,17 @@
             self.device_config_widget.name_change.connect(self.name_config_changed)
 
     def name_config_changed(self, new_name):
+        """
+
+        Parameters
+        ----------
+        new_name :
+            
+
+        Returns
+        -------
+
+        """
         if hasattr(self.device_config_widget, 'data'):
             if self.device_config_widget.data in self.active_devices_dict:
                 if new_name not in self.active_devices_dict:
@@ -759,7 +1015,15 @@
     def ioc_config_changed(self):
         """Called when a value of device-config has changed that is part
         of the IOC (e.g. connection), sets the Make IOC button bold and
-        the progressBar to zero."""
+        the progressBar to zero.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         font = self.pushButton_make_EPICS_environment.font()
         font.setBold(True)
         self.pushButton_make_EPICS_environment.setFont(font)
@@ -767,7 +1031,17 @@
 
     def get_device_config(self, update=True):
         """If the currently used device_config_widget has the attribute
-        data, the settings will be updated to the active_devices_dict."""
+        data, the settings will be updated to the active_devices_dict.
+
+        Parameters
+        ----------
+        update :
+             (Default value = True)
+
+        Returns
+        -------
+
+        """
         if hasattr(self.device_config_widget, 'data'):
             if self.device_config_widget.data in self.active_devices_dict:
                 self.active_devices_dict[self.device_config_widget.data].settings = self.device_config_widget.get_settings()
@@ -782,7 +1056,15 @@
         First it clears the tree and then iterates through all available
         devices in device_dict.
         If a search_text is given, only devices whose name includes the
-        string in search_text are added to the tree."""
+        string in search_text are added to the tree.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         for i in range(3):
             item = self.item_model_devices.item(i,0)
             while item.rowCount() > 0:
@@ -817,7 +1099,15 @@
     # EPICS
     def make_epics_environment(self):
         """Calls the QThread Make_Ioc, creating an IOC with the
-        specified devices."""
+        specified devices.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         self.setCursor(Qt.WaitCursor)
         font = self.pushButton_make_EPICS_environment.font()
         font.setBold(False)
@@ -848,13 +1138,31 @@
             self.pushButton_show_console_output.setText('Show output')
 
     def update_console_output(self, info):
-        """Appends the given info to the current console output."""
+        """Appends the given info to the current console output.
+
+        Parameters
+        ----------
+        info :
+            
+
+        Returns
+        -------
+
+        """
         self.textEdit_console_output.append(info)
 
     def run_stop_ioc(self):
         """Calls the Run_IOC QThread. The IOC corresponding to the
         current device preset is run in that thread, until the button is
-        pushed again, on which the thread is terminated."""
+        pushed again, on which the thread is terminated.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         if self.ioc_thread is None:
             self.ioc_thread = qthreads.Run_IOC(self._current_preset[0])
             self.ioc_thread.info_step.connect(self.update_console_output)
@@ -872,6 +1180,17 @@
             self.stop_ioc()
 
     def running_checkbox_style(self, is_running):
+        """
+
+        Parameters
+        ----------
+        is_running :
+            
+
+        Returns
+        -------
+
+        """
         if is_running:
             col = variables_handling.get_color('green', True)
             self.checkBox_ioc_running.setText('is running')
@@ -885,7 +1204,15 @@
     def stop_ioc(self):
         """Called, when either the IOC is terminated by hand, or when it
         is finished (e.g. because of some error). Sets the button-text
-        back to "Run IOC"."""
+        back to "Run IOC".
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         del self.ioc_thread
         self.ioc_thread = None
         self.pushButton_run_ioc.setText('Run IOC')
@@ -897,6 +1224,7 @@
         self.pushButton_run_ioc.setIcon(icon)
 
     def write_to_console(self):
+        """ """
         if self.ioc_thread is not None:
             text = self.lineEdit_send_to_IOC.text()
             self.ioc_thread.write_to_ioc(text)
@@ -909,7 +1237,15 @@
     # --------------------------------------------------
     def update_add_step_actions(self):
         """Called when the devices change, updating the possible
-        loopsteps to include new device steps."""
+        loopsteps to include new device steps.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         self.add_actions.clear()
         self.device_actions.clear()
         for stp in sorted(make_step_of_type.step_type_config.keys(), key=lambda x: x.lower()):
@@ -926,13 +1262,31 @@
 
 
     def update_protocol_output(self, info):
-        """Appens the given `info` to the console_output_meas."""
+        """Appens the given `info` to the console_output_meas.
+
+        Parameters
+        ----------
+        info :
+            
+
+        Returns
+        -------
+
+        """
         self.textEdit_console_output_meas.append(info)
 
     def run_current_protocol(self):
         """Calls the Run_Protocol QThread. The currently selected
         protocol is used. If the button is clicked agian, the thread is
-        terminated."""
+        terminated.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         # if self.run_thread is None:
         #     self.make_new_run_thread()
         # elif self.run_thread.paused:
@@ -981,6 +1335,17 @@
         #     self.run_thread_finished()
 
     def add_subs_from_dict(self, dictionary):
+        """
+
+        Parameters
+        ----------
+        dictionary :
+            
+
+        Returns
+        -------
+
+        """
         for k, v in dictionary.items():
             if k == 'subs':
                 self.re_subs += v
@@ -990,6 +1355,7 @@
 
 
     def write_to_ipython(self):
+        """ """
         if self.run_thread is not None:
             text = self.lineEdit_write_to_ipython.text()
             self.run_thread.write_to_console(text)
@@ -998,6 +1364,7 @@
             raise Exception('No IPython shell open!')
 
     def pause_protocol(self):
+        """ """
         # if self.run_thread is not None:
         #     self.run_thread.pause()
         if self.run_engine.state == 'running':
@@ -1007,6 +1374,7 @@
             self.pushButton_pause_protocol.setEnabled(False)
 
     def stop_protocol(self):
+        """ """
         # self.run_thread.terminate()
         if self.run_engine.state != 'idle':
             self.run_engine.abort('Aborted by user')
@@ -1014,6 +1382,7 @@
         self.protocol_finished()
 
     def open_protocol(self):
+        """ """
         if self.current_protocol is None:
             raise Exception('You need to select a protocol!')
         path = f"{self.preferences['py_files_path']}/{self.current_protocol.name}.py"
@@ -1023,7 +1392,19 @@
     def build_current_protocol(self, *, put100=True):
         """Calls the build_protocol from nomad_camels.bluesky_handling.protocol_builder
         for the selected protocol and provides it with a savepath and
-        user- and sample-data."""
+        user- and sample-data.
+
+        Parameters
+        ----------
+        * :
+            
+        put100 :
+             (Default value = True)
+
+        Returns
+        -------
+
+        """
         self.progressBar_protocols.setValue(0)
         self.get_step_config()
         self.update_loop_step_order()
@@ -1042,7 +1423,17 @@
         self.progressBar_protocols.setValue(100 if put100 else 1)
 
     def tree_click_sequence(self, general=False):
-        """Called when clicking the treeView_protocol_sequence."""
+        """Called when clicking the treeView_protocol_sequence.
+
+        Parameters
+        ----------
+        general :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         self.update_loop_step_order()
         self.get_step_config()
         self.current_protocol.update_variables()
@@ -1070,6 +1461,17 @@
                 self.loop_step_configuration_widget.name_changed.connect(self.change_step_name)
 
     def enable_step_move(self, enable):
+        """
+
+        Parameters
+        ----------
+        enable :
+            
+
+        Returns
+        -------
+
+        """
         self.pushButton_move_step_in.setEnabled(enable)
         self.pushButton_move_step_out.setEnabled(enable)
         self.pushButton_move_step_up.setEnabled(enable)
@@ -1077,7 +1479,15 @@
 
     def change_step_name(self):
         """Called when a loop_step changes its name, then updates the
-        shown sequence, and also the protocol-data."""
+        shown sequence, and also the protocol-data.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         self.build_protocol_sequence()
         self.update_loop_step_order()
 
@@ -1089,7 +1499,15 @@
 
     def add_protocol(self):
         """Adds a new protocol 'Unnamed_Protocol' to the list.
-        Makes sure that it has a unique filename."""
+        Makes sure that it has a unique filename.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         name = self.unique_protocol_name('Unnamed_Protocol')
         protocol = {name: Measurement_Protocol(name=name)}
         self.protocols_dict.update(protocol)
@@ -1097,7 +1515,15 @@
 
     def remove_protocol(self):
         """Opens a dialog to make sure, then removes the selected
-        protocol."""
+        protocol.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         index = self.listView_protocols.selectedIndexes()[0]
         dat = self.item_model_protocols.itemFromIndex(index).data()
         if dat is not None:
@@ -1111,9 +1537,13 @@
 
         Parameters
         ----------
-        item : QStandardItem
-            the item of the protocol, the data is used to get the old
-            name, the new text is checked to be unique.
+        item :
+            
+
+        Returns
+        -------
+
+        
         """
 
         if self.inside_function:
@@ -1131,7 +1561,17 @@
 
     def unique_protocol_name(self, name):
         """Checks if 'name' is already inside the protocols_dict,
-        if yes, _i is added until i is a not yet used number."""
+        if yes, _i is added until i is a not yet used number.
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         if name in self.protocols_dict:
             i = 2
             while True:
@@ -1166,7 +1606,15 @@
     def protocol_selected(self):
         """Called when a protocol is clicked on. Updates the
         loop_step_order of the old protocol, the builds the sequence of
-        the new one."""
+        the new one.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         self.update_loop_step_order()
         self.build_protocol_sequence()
         ind = self.listView_protocols.selectedIndexes()[0]
@@ -1178,7 +1626,15 @@
 
     def build_protocol_sequence(self):
         """Shows / builds the protocol sequence in the treeView
-        dependent on the loop_steps in the current_protocol."""
+        dependent on the loop_steps in the current_protocol.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         ind = self.listView_protocols.selectedIndexes()
         if not ind:
             return
@@ -1206,7 +1662,17 @@
     def sequence_right_click(self, pos):
         """Opens a specific Menu on right click in the protocol-sequence.
         If selection is not on a loop_step, it consists only of Add Step,
-        otherwise it consists of Delete Step."""
+        otherwise it consists of Delete Step.
+
+        Parameters
+        ----------
+        pos :
+            
+
+        Returns
+        -------
+
+        """
         # TODO other actions
         # TODO more beautiful?
         menu = QMenu()
@@ -1316,6 +1782,7 @@
         menu.exec_(self.treeView_protocol_sequence.viewport().mapToGlobal(pos))
 
     def paste_shortcut(self):
+        """ """
         inds = self.treeView_protocol_sequence.selectedIndexes()
         if inds and (self.copied_loop_step is not None):
             ind = inds[0]
@@ -1331,6 +1798,7 @@
 
 
     def cut_shortcut(self):
+        """ """
         inds = self.treeView_protocol_sequence.selectedIndexes()
         if not inds:
             return
@@ -1338,6 +1806,7 @@
         self.cut_loop_step(item.data())
 
     def copy_shortcut(self):
+        """ """
         inds = self.treeView_protocol_sequence.selectedIndexes()
         if not inds:
             return
@@ -1346,13 +1815,33 @@
 
 
     def cut_loop_step(self, step_name):
-        """Copies the given step, then removes it."""
+        """Copies the given step, then removes it.
+
+        Parameters
+        ----------
+        step_name :
+            
+
+        Returns
+        -------
+
+        """
         self.copy_loop_step(step_name)
         self.remove_loop_step(ask=False)
 
     def copy_loop_step(self, step_name):
         """Makes a deepcopy of the given step and stores it in
-        copied_loop_step."""
+        copied_loop_step.
+
+        Parameters
+        ----------
+        step_name :
+            
+
+        Returns
+        -------
+
+        """
         self.copied_loop_step = deepcopy(self.current_protocol.loop_step_dict[step_name])
 
 
@@ -1362,11 +1851,15 @@
 
         Parameters
         ----------
-        up_down : int
-            moves up if negative (lower row-number), down if positive
-            (default is 0)
-        in_out : int
-            moves in if positive, out if negative, (default 0)
+        up_down :
+             (Default value = 0)
+        in_out :
+             (Default value = 0)
+
+        Returns
+        -------
+
+        
         """
 
         move_command = change_sequence.CommandMoveStep(self.treeView_protocol_sequence, self.item_model_sequence, up_down, in_out, self.current_protocol.loop_step_dict, self.update_loop_step_order)
@@ -1382,16 +1875,19 @@
 
         Parameters
         ----------
-        step_type : str
-            gives the type of step to be added
-        position : int, optional
-            where to add the step, (default -1, append to the end)
-        parent : Loop_Step, optional
-            parent, where to add the new step, (default None, the step
-            is added to the outermost layer of the protocol)
-        copied_step : bool, optional
-            if False, a new step of type step_type will be created,
-            otherwise copied_loop_step will be inserted
+        step_type :
+             (Default value = '')
+        position :
+             (Default value = -1)
+        parent :
+             (Default value = None)
+        copied_step :
+             (Default value = False)
+
+        Returns
+        -------
+
+        
         """
 
         self.update_loop_step_order()
@@ -1409,7 +1905,17 @@
 
     def remove_loop_step(self, ask=True):
         """After updating the loop_step order in the protocol, the
-        selected loop step is deleted (if the messagebox is accepted)."""
+        selected loop step is deleted (if the messagebox is accepted).
+
+        Parameters
+        ----------
+        ask :
+             (Default value = True)
+
+        Returns
+        -------
+
+        """
         self.update_loop_step_order()
         ind = self.treeView_protocol_sequence.selectedIndexes()[0]
         name = self.item_model_sequence.itemFromIndex(ind).data()
@@ -1425,7 +1931,15 @@
 
     def update_loop_step_order(self):
         """Goes through all the loop_steps in the sequence, then
-        rearranges them in the protocol."""
+        rearranges them in the protocol.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         if self.current_protocol is not None:
             loop_steps = []
             for i in range(self.item_model_sequence.rowCount()):
