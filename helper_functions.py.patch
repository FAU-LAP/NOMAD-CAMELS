# Patch generated by Pyment v0.3.3

--- a/.\nomad_camels\\bluesky_handling\helper_functions.py
+++ b/.\nomad_camels\\bluesky_handling\helper_functions.py
@@ -12,11 +12,39 @@
 
 
 def trigger_multi(devices, grp=None):
+    """
+
+    Parameters
+    ----------
+    devices :
+        
+    grp :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     for obj in devices:
         if hasattr(obj, 'trigger'):
             yield from bps.trigger(obj, group=grp)
 
 def read_wo_trigger(devices, grp=None, stream='primary'):
+    """
+
+    Parameters
+    ----------
+    devices :
+        
+    grp :
+         (Default value = None)
+    stream :
+         (Default value = 'primary')
+
+    Returns
+    -------
+
+    """
     if grp is not None:
         yield from bps.wait(grp)
     yield from bps.create(stream)
@@ -29,6 +57,17 @@
     return ret
 
 def simplify_configs_dict(configs):
+    """
+
+    Parameters
+    ----------
+    configs :
+        
+
+    Returns
+    -------
+
+    """
     confs = {}
     for key, value in configs.items():
         if 'value' in value:
@@ -38,6 +77,23 @@
     return confs
 
 def get_fit_results(fits, namespace, yielding=False, stream='primary'):
+    """
+
+    Parameters
+    ----------
+    fits :
+        
+    namespace :
+        
+    yielding :
+         (Default value = False)
+    stream :
+         (Default value = 'primary')
+
+    Returns
+    -------
+
+    """
     for name, fit in fits.items():
         if yielding and fit.stream_name == stream:
             yield from bps.trigger_and_read([fit.read_ready],
@@ -54,6 +110,19 @@
         fit._reset()
 
 def clear_plots(plots, stream='primary'):
+    """
+
+    Parameters
+    ----------
+    plots :
+        
+    stream :
+         (Default value = 'primary')
+
+    Returns
+    -------
+
+    """
     for plot in plots:
         if plot.stream_name == stream or plot.stream_name.startswith(f'{stream}_fits_'):
             plot.clear_plot()
@@ -63,10 +132,60 @@
                      set_channel, read_channels, min_step, max_step, min_val,
                      max_val, stream_name='gradient_descent', learning_rate=0.05,
                      momentum=0.8, max_step_for_diff=None):
+    """
+
+    Parameters
+    ----------
+    max_iterations :
+        
+    threshold :
+        
+    w_init :
+        
+    func_text :
+        
+    evaluator :
+        
+    set_channel :
+        
+    read_channels :
+        
+    min_step :
+        
+    max_step :
+        
+    min_val :
+        
+    max_val :
+        
+    stream_name :
+         (Default value = 'gradient_descent')
+    learning_rate :
+         (Default value = 0.05)
+    momentum :
+         (Default value = 0.8)
+    max_step_for_diff :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
 
     if set_channel not in read_channels:
         read_channels += [set_channel]
     def obj_func(set_val):
+        """
+
+        Parameters
+        ----------
+        set_val :
+            
+
+        Returns
+        -------
+
+        """
         yield from bps.checkpoint()
         yield from bps.abs_set(set_channel, set_val, group='A')
         yield from bps.wait('A')
@@ -138,6 +257,33 @@
 
 def get_range(evaluator, start, stop, points, min_val=np.nan, max_val=np.nan,
               loop_type='start - stop', sweep_mode='linear', endpoint=True):
+    """
+
+    Parameters
+    ----------
+    evaluator :
+        
+    start :
+        
+    stop :
+        
+    points :
+        
+    min_val :
+         (Default value = np.nan)
+    max_val :
+         (Default value = np.nan)
+    loop_type :
+         (Default value = 'start - stop')
+    sweep_mode :
+         (Default value = 'linear')
+    endpoint :
+         (Default value = True)
+
+    Returns
+    -------
+
+    """
     start = evaluator.eval(start)
     stop = evaluator.eval(stop)
     points = evaluator.eval(points)
@@ -161,6 +307,25 @@
 
 
 def get_inner_range(start, stop, points, sweep_mode, endpoint):
+    """
+
+    Parameters
+    ----------
+    start :
+        
+    stop :
+        
+    points :
+        
+    sweep_mode :
+        
+    endpoint :
+        
+
+    Returns
+    -------
+
+    """
     if sweep_mode == 'linear':
         return np.linspace(start, stop, points, endpoint=endpoint)
     elif sweep_mode == 'logarithmic':
@@ -175,6 +340,7 @@
 
 
 class Prompt_Box(QMessageBox):
+    """ """
     def __init__(self, icon='', text='', title='', parent=None):
         super().__init__(parent=parent)
         if icon == 'Error':
@@ -191,17 +357,21 @@
         self.done = False
 
     def set_done(self):
+        """ """
         self.done = True
 
     def start_execution(self):
+        """ """
         self.done = False
         self.exec()
 
 class BoxHelper(QWidget):
+    """ """
     executor = Signal()
 
 
 class Value_Box(QDialog):
+    """ """
     def __init__(self, text='', title='', variables=None, channels=None,
                  free_variables=False, free_channels=False, parent=None,
                  devs=None):
@@ -281,10 +451,12 @@
         self.set_channels = {}
 
     def start_execution(self):
+        """ """
         self.done = False
         self.exec()
 
     def accept(self) -> None:
+        """ """
         self.set_variables = {}
         self.set_channels = {}
         for i, v_box in enumerate(self.variable_boxes):
@@ -320,12 +492,23 @@
         return super().accept()
 
     def reject(self) -> None:
+        """ """
         self.done = True
         return super().reject()
 
 def get_channels(dev):
     """returns the components of an ophyd-device that are not listed in
-    the configuration"""
+    the configuration
+
+    Parameters
+    ----------
+    dev :
+        
+
+    Returns
+    -------
+
+    """
     channels = {}
     for comp in dev.walk_components():
         if issubclass(comp.item.cls, SignalRO):
