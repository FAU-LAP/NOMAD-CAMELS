# Patch generated by Pyment v0.3.3

--- a/.\nomad_camels\\MainApp_v2.py
+++ b/.\nomad_camels\\MainApp_v2.py
@@ -161,6 +161,7 @@
         self.adjustSize()
 
     def with_or_without_instruments(self):
+        """ """
         available = False
         if self.active_instruments:
             available = True
@@ -176,6 +177,7 @@
         self.label_no_instruments.setHidden(available)
 
     def manage_instruments(self):
+        """ """
         self.setCursor(Qt.WaitCursor)
         from nomad_camels.frontpanels.manage_instruments import ManageInstruments
         dialog = ManageInstruments(active_instruments=self.active_instruments,
@@ -187,15 +189,38 @@
         self.with_or_without_instruments()
 
     def add_to_open_windows(self, window):
+        """
+
+        Parameters
+        ----------
+        window :
+            
+
+        Returns
+        -------
+
+        """
         self.open_windows.append(window)
         window.closing.connect(lambda x=window: self.open_windows.remove(x))
 
     def add_to_plots(self, plot):
+        """
+
+        Parameters
+        ----------
+        plot :
+            
+
+        Returns
+        -------
+
+        """
         self.open_plots.append(plot)
         plot.closing.connect(lambda x=plot: self.open_plots.remove(x))
         self.add_to_open_windows(plot)
 
     def close_plots(self):
+        """ """
         for plot in self.open_plots:
             plot.close()
     # --------------------------------------------------
@@ -209,7 +234,17 @@
         return ret
 
     def closeEvent(self, a0):
-        """Calling the save_state method when closing the window."""
+        """Calling the save_state method when closing the window.
+
+        Parameters
+        ----------
+        a0 :
+            
+
+        Returns
+        -------
+
+        """
         for window in self.open_windows:
             window.close()
         if self.open_windows:
@@ -225,11 +260,18 @@
     def edit_user_info(self):
         """Calls dialog for user-information when
         pushButton_editUserInfo is clicked.
-
+        
         The opened AddRemoveDialoge contains columns for Name, E-Mail,
         Affiliation, Address, ORCID and Phone of the user.
         If the dialog is canceled, nothing is changed, otherwise the new
         data will be written into self.userdata.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         import pandas as pd
         from nomad_camels.ui_widgets import add_remove_table
@@ -257,7 +299,15 @@
 
     def save_user_data(self):
         """Calling the save_dictionary function with the savefile as
-        %localappdata%/userdata.json and self.userdata as dictionary."""
+        %localappdata%/userdata.json and self.userdata as dictionary.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         self.active_user = self.comboBox_user.currentText()
         userdic = {'active_user': self.active_user}
         userdic.update(self.userdata)
@@ -265,7 +315,15 @@
 
     def load_user_data(self):
         """Loading the dictionary from %localappdata%/userdata.json,
-        selecting the active user and saving the rest into self.userdata."""
+        selecting the active user and saving the rest into self.userdata.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         userdat = {}
         if os.path.isfile(f'{load_save_functions.appdata_path}/userdata.json'):
             with open(f'{load_save_functions.appdata_path}/userdata.json', 'r') as f:
@@ -282,11 +340,18 @@
     def edit_sample_info(self):
         """Calls dialog for user-information when
         pushButton_editSampleInfo is clicked.
-
+        
         The opened AddRemoveDialoge contains columns for Name,
         Identifier, and Preparation-Info.
         If the dialog is canceled, nothing is changed, otherwise the new
         data will be written into self.userdata.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         import pandas as pd
         from nomad_camels.ui_widgets import add_remove_table
@@ -309,7 +374,15 @@
 
     def save_sample_data(self):
         """Calling the save_dictionary function with the savefile as
-        %localappdata%/sampledata.json and self.sampledata as dictionary."""
+        %localappdata%/sampledata.json and self.sampledata as dictionary.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         self.active_sample = self.comboBox_sample.currentText()
         sampledic = {'active_sample': self.active_sample}
         sampledic.update(self.sampledata)
@@ -317,7 +390,15 @@
 
     def load_sample_data(self):
         """Loading the dictionary from %localappdata%/sampledata.json,
-        selecting the active sample and saving the rest into self.sampledata."""
+        selecting the active sample and saving the rest into self.sampledata.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         sampledat = {}
         if os.path.isfile(f'{load_save_functions.appdata_path}/sampledata.json'):
             with open(f'{load_save_functions.appdata_path}/sampledata.json', 'r') as f:
@@ -336,7 +417,7 @@
     # --------------------------------------------------
     def load_preferences(self):
         """Loads the preferences.
-
+        
         Those may contain:
         - autosave: turn on / off autosave on closing the program.
         - dark_mode: turning dark-mode on / off.
@@ -351,6 +432,13 @@
         - device_driver_path: the path, where NOMAD-CAMELS can find the
             installed devices.
         - databroker_catalog_name: the name of the databroker catalog
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         self.preferences = load_save_functions.get_preferences()
         variables_handling.preferences = self.preferences
@@ -364,6 +452,7 @@
         variables_handling.meas_files_path = self.preferences['meas_files_path']
 
     def change_theme(self):
+        """ """
         theme = self.preferences['graphic_theme']
         if 'material_theme' in self.preferences:
             material_theme = self.preferences['material_theme']
@@ -375,11 +464,20 @@
 
     def toggle_dark_mode(self):
         """Turning dark mode on / off, called whenever the settigns are
-        changed. Using qdarkstyle to provide the stylesheets."""
+        changed. Using qdarkstyle to provide the stylesheets.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         dark = self.preferences['dark_mode']
         variables_handling.dark_mode = dark
 
     def change_catalog_name(self):
+        """ """
         if 'meas_files_path' in self.preferences:
             catalog_name = 'CATALOG_NAME'
             if 'databroker_catalog_name' in self.preferences:
@@ -399,7 +497,15 @@
     def change_preferences(self):
         """Called when any preferences are changed. Makes the dictionary
          of preferences and calls save_preferences from the
-         load_save_functions module."""
+         load_save_functions module.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         from nomad_camels.frontpanels.settings_window import Settings_Window
         settings_dialog = Settings_Window(parent=self, settings=self.preferences)
         if settings_dialog.exec():
@@ -413,7 +519,17 @@
         self.change_theme()
 
     def save_state(self, fromload=False):
-        """Saves the current states of both presets."""
+        """Saves the current states of both presets.
+
+        Parameters
+        ----------
+        fromload :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         self.make_save_dict()
         load_save_functions.autosave_preset(self._current_preset[0], self.__save_dict__)
         if fromload:
@@ -440,7 +556,15 @@
 
     def save_preset_as(self):
         """Opens a QFileDialog to save the device preset.
-        A backup / autosave of the preset is made automatically."""
+        A backup / autosave of the preset is made automatically.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         file = QFileDialog.getSaveFileName(self, 'Save Preset',
                                            load_save_functions.preset_path,
                                            '*.preset')[0]
@@ -454,7 +578,15 @@
 
     def load_backup_preset(self):
         """Opens a QFileDialog in the Backup-folder of the presets.
-        If a backup is selected, the current preset is put into backup."""
+        If a backup is selected, the current preset is put into backup.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         file = QFileDialog.getOpenFileName(self, 'Open Preset',
                                            f'{load_save_functions.preset_path}',
                                            '*.preset')[0]
@@ -477,7 +609,17 @@
 
     def change_preset(self, preset):
         """saves the old device preset,
-        then changes to / loads the new preset."""
+        then changes to / loads the new preset.
+
+        Parameters
+        ----------
+        preset :
+            
+
+        Returns
+        -------
+
+        """
         self.save_state()
         self._current_preset[0] = preset
         self.load_preset(preset)
@@ -485,7 +627,17 @@
 
     def load_preset(self, preset):
         """Called when the comboBox_device_preset is changed
-        (or when loading the last state). Opens the given preset."""
+        (or when loading the last state). Opens the given preset.
+
+        Parameters
+        ----------
+        preset :
+            
+
+        Returns
+        -------
+
+        """
         try:
             with open(f'{load_save_functions.preset_path}{preset}.preset', 'r') as f:
                 preset_dict = json.load(f)
@@ -504,6 +656,7 @@
         variables_handling.preset = self._current_preset[0]
 
     def make_save_dict(self):
+        """ """
         self.preset_save_dict = {'_current_preset': self._current_preset,
                                  'active_instruments': self.active_instruments,
                                  'protocols_dict': self.protocols_dict,
@@ -516,7 +669,15 @@
     def update_channels(self):
         """Called when the active devices change.
         The channels in variables_handling are updated with the ones
-        provided by the active devices."""
+        provided by the active devices.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         variables_handling.channels.clear()
         for key, dev in self.active_instruments.items():
             for channel in dev.get_channels():
@@ -527,9 +688,21 @@
     # --------------------------------------------------
 
     def manual_control_order_changed(self, order):
+        """
+
+        Parameters
+        ----------
+        order :
+            
+
+        Returns
+        -------
+
+        """
         self.manual_controls = OrderedDict(sorted(self.manual_controls.items(), key=lambda x: order.index(x[0])))
 
     def add_manual_control(self):
+        """ """
         from nomad_camels.manual_controls.get_manual_controls import New_Manual_Control_Dialog
         dialog = New_Manual_Control_Dialog(self)
         if dialog.exec():
@@ -539,23 +712,69 @@
                 self.add_manual_control_to_data(options.control_data)
 
     def add_manual_control_to_data(self, control_data):
+        """
+
+        Parameters
+        ----------
+        control_data :
+            
+
+        Returns
+        -------
+
+        """
         self.manual_controls[control_data['name']] = control_data
         self.add_button_to_manuals(control_data['name'])
         self.button_area_manual.setHidden(False)
 
     def remove_manual_control(self, control_name):
+        """
+
+        Parameters
+        ----------
+        control_name :
+            
+
+        Returns
+        -------
+
+        """
         self.manual_controls.pop(control_name)
         self.button_area_manual.remove_button(control_name)
         if not self.manual_controls:
             self.button_area_manual.setHidden(True)
 
     def update_man_cont_data(self, control_data, old_name):
+        """
+
+        Parameters
+        ----------
+        control_data :
+            
+        old_name :
+            
+
+        Returns
+        -------
+
+        """
         self.manual_controls.pop(old_name)
         self.manual_controls[control_data['name']] = control_data
         button = self.button_area_manual.rename_button(old_name, control_data['name'])
         self.add_functions_to_manual_button(button, control_data['name'])
 
     def open_manual_control_config(self, control_name):
+        """
+
+        Parameters
+        ----------
+        control_name :
+            
+
+        Returns
+        -------
+
+        """
         from nomad_camels.manual_controls.get_manual_controls import get_control_by_type_name
         control_data = self.manual_controls[control_name]
         config_cls = get_control_by_type_name(control_data['control_type'])[1]
@@ -564,18 +783,43 @@
             self.update_man_cont_data(dialog.control_data, control_name)
 
     def add_button_to_manuals(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         button = options_run_button.Options_Run_Button(name, small_text='Start',
                                                        protocol_options=False)
         self.button_area_manual.add_button(button, name)
         self.add_functions_to_manual_button(button, name)
 
     def add_functions_to_manual_button(self, button, name):
+        """
+
+        Parameters
+        ----------
+        button :
+            
+        name :
+            
+
+        Returns
+        -------
+
+        """
         button.config_function = lambda state=None, x=name: self.open_manual_control_config(x)
         button.run_function = lambda state=None, x=name: self.start_manual_control(x)
         button.del_function = lambda x=name: self.remove_manual_control(x)
         button.update_functions()
 
     def populate_manuals_buttons(self):
+        """ """
         if not self.manual_controls:
             self.button_area_manual.setHidden(True)
         else:
@@ -584,6 +828,17 @@
             self.add_button_to_manuals(control)
 
     def start_manual_control(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         from nomad_camels.manual_controls.get_manual_controls import get_control_by_type_name
         control_data = self.manual_controls[name]
         control_type = control_data['control_type']
@@ -594,6 +849,19 @@
         self.button_area_manual.disable_single_run(name)
 
     def close_manual_control(self, control, name):
+        """
+
+        Parameters
+        ----------
+        control :
+            
+        name :
+            
+
+        Returns
+        -------
+
+        """
         self.open_windows.remove(control)
         self.button_area_manual.enable_single_run(name)
 
@@ -601,9 +869,21 @@
     # protocols
     # --------------------------------------------------
     def protocol_order_changed(self, order):
+        """
+
+        Parameters
+        ----------
+        order :
+            
+
+        Returns
+        -------
+
+        """
         self.protocols_dict = OrderedDict(sorted(self.protocols_dict.items(), key=lambda x: order.index(x[0])))
 
     def add_measurement_protocol(self):
+        """ """
         from nomad_camels.frontpanels.protocol_config import Protocol_Config
         dialog = Protocol_Config()
         dialog.show()
@@ -611,23 +891,69 @@
         self.add_to_open_windows(dialog)
 
     def add_prot_to_data(self, protocol):
+        """
+
+        Parameters
+        ----------
+        protocol :
+            
+
+        Returns
+        -------
+
+        """
         self.protocols_dict[protocol.name] = protocol
         self.add_button_to_meas(protocol.name)
         self.button_area_meas.setHidden(False)
 
     def remove_protocol(self, prot_name):
+        """
+
+        Parameters
+        ----------
+        prot_name :
+            
+
+        Returns
+        -------
+
+        """
         self.protocols_dict.pop(prot_name)
         self.button_area_meas.remove_button(prot_name)
         if not self.protocols_dict:
             self.button_area_meas.setHidden(True)
 
     def update_prot_data(self, protocol, old_name):
+        """
+
+        Parameters
+        ----------
+        protocol :
+            
+        old_name :
+            
+
+        Returns
+        -------
+
+        """
         self.protocols_dict.pop(old_name)
         self.protocols_dict[protocol.name] = protocol
         button = self.button_area_meas.rename_button(old_name, protocol.name)
         self.add_functions_to_meas_button(button, protocol.name)
 
     def open_protocol_config(self, prot_name):
+        """
+
+        Parameters
+        ----------
+        prot_name :
+            
+
+        Returns
+        -------
+
+        """
         from nomad_camels.frontpanels.protocol_config import Protocol_Config
         dialog = Protocol_Config(self.protocols_dict[prot_name])
         dialog.show()
@@ -635,11 +961,35 @@
         self.add_to_open_windows(dialog)
 
     def add_button_to_meas(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         button = options_run_button.Options_Run_Button(name)
         self.button_area_meas.add_button(button, name)
         self.add_functions_to_meas_button(button, name)
 
     def add_functions_to_meas_button(self, button, name):
+        """
+
+        Parameters
+        ----------
+        button :
+            
+        name :
+            
+
+        Returns
+        -------
+
+        """
         button.config_function = lambda state=None, x=name: self.open_protocol_config(x)
         button.run_function = lambda state=None, x=name: self.run_protocol(x)
         button.build_function = lambda x=name: self.build_protocol(x)
@@ -648,6 +998,7 @@
         button.update_functions()
 
     def populate_meas_buttons(self):
+        """ """
         if not self.protocols_dict:
             self.button_area_meas.setHidden(True)
         else:
@@ -656,6 +1007,17 @@
             self.add_button_to_meas(prot)
 
     def run_protocol(self, protocol_name):
+        """
+
+        Parameters
+        ----------
+        protocol_name :
+            
+
+        Returns
+        -------
+
+        """
         from nomad_camels.utility import device_handling
         self.button_area_meas.disable_run_buttons()
         self.build_protocol(protocol_name, ask_file=False)
@@ -696,6 +1058,17 @@
         self.protocol_stepper_signal.emit(100)
 
     def add_subs_from_dict(self, dictionary):
+        """
+
+        Parameters
+        ----------
+        dictionary :
+            
+
+        Returns
+        -------
+
+        """
         for k, v in dictionary.items():
             if k == 'subs':
                 self.re_subs += v
@@ -703,23 +1076,37 @@
                 self.add_subs_from_dict(v)
 
     def pause_protocol(self):
+        """ """
         if self.run_engine.state == 'running':
             self.run_engine.request_pause()
             self.pushButton_resume.setEnabled(True)
             self.pushButton_pause.setEnabled(False)
 
     def stop_protocol(self):
+        """ """
         if self.run_engine.state != 'idle':
             self.run_engine.abort('Aborted by user')
         # self.protocol_finished()
 
     def resume_protocol(self):
+        """ """
         if self.run_engine.state == 'paused':
             self.pushButton_resume.setEnabled(False)
             self.pushButton_pause.setEnabled(True)
             self.run_engine.resume()
 
     def protocol_finished(self, *args):
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+
+        Returns
+        -------
+
+        """
         from nomad_camels.utility import databroker_export, device_handling
         if self.protocol_module and self.protocol_module.uids:
             runs = self.databroker_catalog[tuple(self.protocol_module.uids)]
@@ -741,7 +1128,19 @@
     def build_protocol(self, protocol_name, ask_file=True):
         """Calls the build_protocol from nomad_camels.bluesky_handling.protocol_builder
         for the selected protocol and provides it with a savepath and
-        user- and sample-data."""
+        user- and sample-data.
+
+        Parameters
+        ----------
+        protocol_name :
+            
+        ask_file :
+             (Default value = True)
+
+        Returns
+        -------
+
+        """
         self.progressBar_protocols.setValue(0)
         protocol = self.protocols_dict[protocol_name]
         protocol.session_name = self.lineEdit_session.text()
@@ -767,6 +1166,17 @@
         self.progressBar_protocols.setValue(100 if ask_file else 1)
 
     def open_protocol(self, protocol_name):
+        """
+
+        Parameters
+        ----------
+        protocol_name :
+            
+
+        Returns
+        -------
+
+        """
         path = f"{self.preferences['py_files_path']}/{protocol_name}.py"
         if not os.path.isfile(path):
             self.build_protocol(protocol_name, False)
@@ -776,6 +1186,7 @@
     # tools
     # --------------------------------------------------
     def launch_device_builder(self):
+        """ """
         from nomad_camels.tools import VISA_device_builder
         device_builder = VISA_device_builder.VISA_Device_Builder(self)
         device_builder.show()
