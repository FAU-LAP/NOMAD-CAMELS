name: Run Python Tests

on:
  push:
    branches:
      - development
      - main
      - testing
  pull_request:
    branches:
      - development
      - main
      - testing

jobs:
  windows_test:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Python 3
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff poetry
          poetry install --all-extras
      - name: List packages
        run: pip list
      - name: Lint with ruff
        run: |
          # stop the build if there are Python syntax errors or undefined names
          ruff check --output-format=github --select=E9,F63,F7,F82 --target-version=py39 .
      - name: Run tests with pytest
        run: poetry run pytest -vv --timeout=100 --cov-config=./nomad_camels/tests/.coveragerc --cov-report=term-missing:skip-covered --cov=nomad_camels
      - name: Rename coverage file (Windows)
        run: |
          ren .coverage .coverage.windows
      - name: Upload coverage artifact (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-windows
          path: .coverage.windows
          include-hidden-files: true

  ubuntu_test:
    runs-on: ubuntu-latest
    env:
      DISPLAY: ':99.0'
    steps:
      - uses: actions/checkout@v4
      - name: Install Python 3
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - uses: tlambert03/setup-qt-libs@v1
      - name: Install dependencies
        run: |
          sudo apt install libgl1 libglx-mesa0 libegl1 libopengl0 libpulse0
          python -m pip install --upgrade pip
          pip install ruff poetry
          poetry install --all-extras
          export QT_DEBUG_PLUGINS=1
      - name: List packages
        run: pip list
      - name: Lint with ruff
        run: |
          # stop the build if there are Python syntax errors or undefined names
          ruff check --output-format=github --select=E9,F63,F7,F82 --target-version=py39 .
      - name: Run tests with pytest
        run: |
          poetry run pytest -vv --timeout=100 --cov-config=./nomad_camels/tests/.coveragerc --cov-report=term-missing:skip-covered --cov=nomad_camels
      - name: Rename coverage file (Ubuntu)
        run:  |
          mv .coverage .coverage.ubuntu
      - name: Upload coverage artifact (Ubuntu)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-ubuntu
          path: .coverage.ubuntu
          include-hidden-files: true

  macos_test:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Python 3
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install dependencies
        run: |
          if brew list pkg-config@0.29.2 &>/dev/null; then
            brew unlink pkg-config@0.29.2
          fi
          brew install hdf5
          echo "HDF5_DIR=$(brew --prefix hdf5)" >> $GITHUB_ENV
          python -m pip install --upgrade pip
          pip install ruff poetry
          poetry install --all-extras
      - name: List packages
        run: pip list
      - name: Lint with ruff
        run: |
          # stop the build if there are Python syntax errors or undefined names
          ruff check --output-format=github --select=E9,F63,F7,F82 --target-version=py39 .
      - name: Run tests with pytest
        run: |
          poetry run pytest -vv --timeout=100 --cov-config=./nomad_camels/tests/.coveragerc --cov-report=term-missing:skip-covered --cov=nomad_camels
      - name: Rename coverage file (macOS)
        run: |
          mv .coverage .coverage.macos
      - name: Upload coverage artifact (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-macos
          path: .coverage.macos
          include-hidden-files: true

  coverage_report:
    runs-on: ubuntu-latest
    needs: [windows_test, ubuntu_test, macos_test]
    steps:
      - uses: actions/checkout@v4
      - name: Download Windows coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-windows
          path: coverage_files
      - name: Download Ubuntu coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-ubuntu
          path: coverage_files
      - name: Download macOS coverage artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-macos
          path: coverage_files
      - name: Install Python and coverage
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install coverage
        run: pip install coverage
      - name: Combine coverage files and display report
        run: |
          shopt -s dotglob && cp coverage_files/* .
          coverage combine
          coverage report --include="nomad_camels/*" --omit=*/site-packages/* --show-missing
      - name: Generate HTML Coverage Report
        run: |
          coverage html --include="nomad_camels/*" --omit=*/site-packages/*
      - name: Upload HTML Coverage Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: html-coverage-report
          path: htmlcov
          include-hidden-files: true
      

  run_high_tests:
    runs-on: windows-latest
    if: ${{ github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.base_ref == 'main') }}
    needs: [windows_test, ubuntu_test, macos_test]
    env:
        DISPLAY: ':99.0'
    strategy:
        matrix:
            python-version: ["3.9", "3.10", "3.11", "3.12"]
        fail-fast: false
    steps:
        - uses: actions/checkout@v4
        - name: Install Python ${{ matrix.python-version }}
          uses: actions/setup-python@v5
          with:
            python-version: ${{ matrix.python-version }}
        - name: Install dependencies
          run: |
            pip install poetry
            poetry install --all-extras
            poetry show
        - name: Run tests with retry
          run: |
            & poetry run pytest -vv --timeout=100
            if ($LASTEXITCODE -eq 0) {
              Write-Host "Tests passed on the first run."
              exit 0
            }
            else {
              Write-Host "Tests failed on the first run. Retrying..."
              & poetry run pytest -vv --timeout=100
              if ($LASTEXITCODE -eq 0) {
                Write-Host "Tests passed on the retry."
                exit 0
              }
              else {
                Write-Host "Tests failed on both attempts."
                exit 1
              }
            }
        - name: Run package checking on failure
          if: failure()
          run: |
            pip install toml packaging
            python ./dev_tools/package_version_testing.py --max
        - name: Upload test results
          if: failure()
          uses: actions/upload-artifact@v4
          with:
            name: test-results-${{ matrix.python-version }}
            path: |
              test_output.txt
              test_log.txt
  run_low_tests:
    runs-on: windows-latest
    if: ${{ github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.base_ref == 'main') }}
    needs: [windows_test, ubuntu_test, macos_test]
    env:
        DISPLAY: ':99.0'
    strategy:
        matrix:
            python-version: ["3.9", "3.10", "3.11", "3.12"]
        fail-fast: false
    steps:
        - uses: actions/checkout@v4
        - name: Install Python ${{ matrix.python-version }}
          uses: actions/setup-python@v5
          with:
            python-version: ${{ matrix.python-version }}
        - name: update min versions
          run: |
            pip install toml packaging
            python ./dev_tools/min_versions_from_toml.py
        - name: Install dependencies
          run: |
            pip install -q -r ./dev_tools/req_min_${{ matrix.python-version }}.txt
            pip list
        - name: Run tests with retry
          run: |
            & python -m pytest -vv --timeout=100
            if ($LASTEXITCODE -eq 0) {
              Write-Host "Tests passed on the first run."
              exit 0
            }
            else {
              Write-Host "Tests failed on the first run. Retrying..."
              & python -m pytest -vv --timeout=100
              if ($LASTEXITCODE -eq 0) {
                Write-Host "Tests passed on the retry."
                exit 0
              }
              else {
                Write-Host "Tests failed on both attempts."
                exit 1
              }
            }
        - name: Run package checking on failure
          if: failure()
          run: |
            python ./dev_tools/package_version_testing.py
        - name: Upload test results
          if: failure()
          uses: actions/upload-artifact@v4
          with:
            name: test-results-${{ matrix.python-version }}
            path: |
              test_output.txt
              test_log.txt